name: terraform

on:
  push:
    branches: ["master", "terraform-init"]
  workflow_dispatch:

permissions:
  contents: 'read'
  packages: 'write'

env:
  twitposter_image: 'ghcr.io/wallyrion/twitposter:latest'


jobs:
  terraform:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    environment: prod  # Specify the environment here
    
    steps:
      - name: 'Checkout GitHub Actions'
        uses: actions/checkout@v4

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3

      - name: 'Login to Azure'
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: 'Initialize Terraform'
        run: |
          terraform init \
            -backend-config="resource_group_name=tfstate-rg" \
            -backend-config="storage_account_name=tfstate12345" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="client_id=${{ secrets.ARM_CLIENT_ID }}" \
            -backend-config="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
            -backend-config="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -backend-config="tenant_id=${{ secrets.ARM_TENANT_ID }}"
        working-directory: ./terraform

      - name: 'Check and Import Existing Resource Group'
        id: import_rg
        run: |
          if az group show --name twitposter-dev-rg; then
            terraform import azurerm_resource_group.rg /subscriptions/73774bc1-ae0f-4e4f-bd61-a35d913721fe/resourceGroups/twitposter-dev-rg
          fi
        working-directory: ./terraform


      - name: 'Plan Terraform'
        id: plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform

      - name: 'Apply Terraform'
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: 'Fetch App Service Name'
        id: fetch_app_service_name
        run: echo "APP_SERVICE_NAME=$(terraform output -raw app_service_name)" >> $GITHUB_ENV
        working-directory: ./terraform

      - name: 'Fetch Publish Profile Command'
        id: fetch_publish_profile
        run: |
          PUBLISH_PROFILE_COMMAND=$(terraform output -raw publish_profile_command)
          $PUBLISH_PROFILE_COMMAND > publish_profile.xml
          echo "::add-mask::$(cat publish_profile.xml)"
          echo "PUBLISH_PROFILE_CONTENT=$(cat publish_profile.xml)" >> $GITHUB_ENV
        working-directory: ./terraform

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Set GitHub Secret
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_SECRETS_MANIPULATOR }}
        run: |
          cat publish_profile.xml | gh secret set TEST_APP_PUBLISH_PROFILE --env prod
        
        
  build:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
      - name: Restore dependencies - TwitPoster
        run: dotnet restore ./TwitPoster

      - name: Build - TwitPoster
        run: dotnet build --no-restore ./TwitPoster -c Release

      - name: Test - TwitPoster
        env:
          ASPNETCORE_ENVIRONMENT: Production
        run: dotnet test --no-build --verbosity normal ./TwitPoster -c Release

      - name: Log in to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: publish image
        run: dotnet publish ./TwitPoster/src/TwitPoster.Web/TwitPoster.Web.csproj /t:PublishContainer -r linux-x64

      - name: change image tag
        run: docker tag twitposter ${{ env.twitposter_image }}

      - name: Docker Push
        run: docker push ${{ env.twitposter_image }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'prod'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}/swagger/index.html

    steps:
      - name: Set up secret file
        env:
          TEST_APP_PUBLISH_PROFILE: ${{ secrets.TEST_APP_PUBLISH_PROFILE }}
        run: |
          echo $TEST_APP_PUBLISH_PROFILE | sed 's/./& /g'
        
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_SERVICE_NAME }}
          publish-profile: ${{ secrets.TEST_APP_PUBLISH_PROFILE }}
          images: ${{ env.twitposter_image }}

      - name: Trigger Azure WebHook
        run: |
          curl -X POST $WEBHOOK_URL
        env:
          WEBHOOK_URL: ${{ secrets.AZURE_WEBHOOK_URL_TWITPOSTER }}
        shell: bash
  